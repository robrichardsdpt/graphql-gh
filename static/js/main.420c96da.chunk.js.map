{"version":3,"sources":["components/user-item/user-item.component.jsx","components/user-query/user-query.component.jsx","components/repo-item/repo-item.component.jsx","components/repo-query/repo-query.component.jsx","components/table/table.component.jsx","assets/githubimg.png","pages/dashboard/dashboard.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["UserItem","user","Row","className","Col","xs","md","href","url","target","login","databaseId","parse","createdAt","src","avatarUrl","alt","bio","followers","totalCount","GET_HOT_USERS","gql","GetHotUserQuery","query","pollInterval","data","error","loading","refetch","console","log","JSON","stringify","search","nodes","map","Button","id","variant","size","block","onClick","RepoItem","repo","name","owner","description","stargazers","GET_HOT_REPOS","GetHotRepoQuery","TableComponent","jsxData","children","Container","fluid","Dashboard","props","Image","github","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","process","authorization","cache","InMemoryCache","client","ApolloClient","link","concat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.420c96da.chunk.js","sourcesContent":["import React from 'react'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Moment from 'react-moment'\nimport './user-item.styles.css'\n\n// Component for User information returned from API and printed out in JSX\n// Include columns for, at least, the following attributes id, login, avatar image and number of followers.\nconst UserItem = ({ user }) => {\n  return(\n    <Row className='user-row'>\n      <Col xs={12} md={5} className='user-login-container'>\n        <a href={`${user.url}`} target='blank' className='link'>\n          <h4 className='user-login-text'>{user.login}</h4>\n        </a>\n        <h5 className='user-details'> {`User ID:  ${user.databaseId}`}</h5>\n        <p className='user-date-joined-text user-details'>{'Joined:  '}\n          <Moment parse=\"YYYY-MM-DD HH:mm\">{user.createdAt}</Moment>\n        </p>\n      </Col>\n      <Col xs={6} md={2} className='user-avatar-container'>\n        <img src={`${user.avatarUrl}`} className='avatar' alt='avatar'/>\n      </Col>\n      <Col xs={6} md={3} className='user-col user-bio-container'>\n        { user.bio ? user.bio : 'This user did not supply a bio.'}\n      </Col>\n      <Col xs={12} md={2} className='user-col user-followers-container'>\n        <h5 className='user-followers-text-label'>Followers:</h5>\n        <h4 className='user-followers-text'> {user.followers.totalCount}</h4>\n      </Col>\n    </Row>\n  )\n}\n\nexport default UserItem\n","import React from 'react'\nimport { Query } from 'react-apollo'\nimport { gql } from 'apollo-boost'\nimport UserItem from '../user-item/user-item.component'\nimport Button from 'react-bootstrap/Button'\nimport './user-query.styles.css'\n\n// GraphQL/Apollo query to find the top 5 most active users by followers created over the last year (2020).\nconst GET_HOT_USERS = gql`\n  {\n    search(query: \"created:2020-01-01..2020-12-31\", type: USER, first: 5) {\n      nodes {\n        ... on User {\n          databaseId\n          login\n          name\n          avatarUrl\n          bio\n          createdAt\n          url\n          followers(first:5) {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n`\n// Create a button with an id of “prolific_users” that upon click will refresh the content of a tablelike div with the top 5 most active users by followers created over the last year (2020).\n// Automatically refresh the number of followers every 2 minutes (or 120000ms).\nexport const GetHotUserQuery = () => {\n  // Passes off data to UserItem component to populate JSX\n  return(\n    <div>\n      <Query query={GET_HOT_USERS} pollInterval={120000}>\n        {({ data, error, loading, refetch }) => {\n          if (loading) return <div>loading...</div>\n          if (error) return console.log(JSON.stringify(error))\n          return <div>{\n            data.search.nodes.map(user => (\n              <UserItem key={user.login} user={user}/>\n            ))\n          }\n          <Button id='prolific_users' className='user-button' variant='info' size='lg' block onClick={()=> refetch()}>Update Users</Button>\n          </div>\n        }}\n      </Query>\n  </div>)\n}\n","import React from 'react'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Moment from 'react-moment'\nimport './repo-item.styles.css'\n\n// Component for Repo information returned from API and printed out in JSX\n// Include columns for, at least, the following attributes id, name, description and number of stars.\nconst RepoItem = ({ repo }) => {\n  return(\n    <Row className='repo-row'>\n      <Col xs={12} md={5} className='repo-col'>\n        <a href={`${repo.url}`} target='blank' className='link'>\n          <h4 className='repo-name-text'>{repo.name}</h4>\n        </a>\n        <h5 className='repo-details'>{`Repo ID:  ${repo.databaseId}`}</h5>\n        <a href={`${repo.owner.url}`} target='blank' className='link'>\n          <h5 className='repo-details'>{repo.owner.login}</h5>\n        </a>\n        <p className='repo-details repo-created-text'>Created on: <Moment parse=\"YYYY-MM-DD HH:mm\">{repo.createdAt}</Moment></p>\n      </Col>\n      <Col xs={6} md={2} className='repo-col repo-avatar-container'>\n        <img src={`${repo.owner.avatarUrl}`} alt='avatar' className='avatar'/>\n      </Col>\n      <Col xs={6} md={3} className='repo-col repo-description-container'>\n        <p className='repo-description-text'>{repo.description}</p>\n      </Col>\n      <Col xs={12} md={2} className='repo-stars-container'>\n        <h5 className='repo-stars-text-label'>Stars: </h5>\n        <h4 className='repo-stars-text'>{repo.stargazers.totalCount}</h4>\n      </Col>\n    </Row>\n  )\n}\n\nexport default RepoItem\n","import React from 'react'\nimport { Query } from 'react-apollo'\nimport { gql } from 'apollo-boost'\nimport Button from 'react-bootstrap/Button'\nimport RepoItem from '../repo-item/repo-item.component'\nimport './repo-query.styles.css'\n\n// Apollo/GraphQL query to GH\n// Find the top 5 repositories with the most stars created last month.\nconst GET_HOT_REPOS = gql`\n  {\n    search(query: \"created:2020-01-01..2020-12-31 stars:>2000\", type: REPOSITORY, first: 5) {\n      nodes {\n        ... on Repository {\n          databaseId\n          name\n          createdAt\n          description\n          url\n          stargazers(first: 5){\n            totalCount\n         }\n         owner {\n           login\n           avatarUrl\n           url\n         }\n        }\n      }\n    }\n  }\n`\n// Create a button with an id of “hot_repo” that upon click will refresh the content of a tablelike div with the top 5 repositories with the most stars created last month.\nexport const GetHotRepoQuery = () => {\n// Sends API data to RepoItem component to populate JSX\nreturn(\n  <div>\n    <Query query={GET_HOT_REPOS} >\n      {({ data, error, loading, refetch }) => {\n          if (loading) return <div>loading...</div>\n          if (error) return console.log(JSON.stringify(error))\n          return <div>\n          {\n            data.search.nodes.map(repo => (\n              <RepoItem key={repo.name} repo={repo}/>\n            ))\n          }\n            <Button id='hot_repo' className='repo-button' variant='info' size='lg' block onClick={()=> refetch()}>Update Repos</Button>\n          </div>\n        }\n      }\n    </Query>\n  </div>)\n}\n","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport { GetHotUserQuery } from '../user-query/user-query.component'\nimport { GetHotRepoQuery } from '../repo-query/repo-query.component'\nimport './table.styles.css'\n\n// Table Component which gets children from Dashboard and then creates table accordingly\n//  Calls Queries for table data\nconst TableComponent = ({ children }) => {\n    let jsxData\n    if(children==='Prolific Users of 2020') jsxData = <GetHotUserQuery/>\n    if(children==='Hottest Repos of 2020') jsxData = <GetHotRepoQuery/>\n    return(\n      <div className='table-container'>\n        <Container fluid className='table'>\n          <Row className='header-row'>\n            <h1 className='table-title'>{`${children}`}</h1>\n          </Row>\n          <Row>\n            {jsxData}\n          </Row>\n        </Container>\n      </div>\n    )\n}\n\nexport default TableComponent\n","export default __webpack_public_path__ + \"static/media/githubimg.285ac67f.png\";","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Image from 'react-bootstrap/Image'\nimport TableComponent from '../../components/table/table.component'\nimport github from '../../assets/githubimg.png'\nimport './dashboard.styles.css'\n\n// Dashboard component which contains both tables\nconst Dashboard = (props) => (\n  <Container className='dashboard-container'>\n    <Image fluid className='github-image'src={github} alt='github'/>\n    <Row className='dashboard-row'>\n      <TableComponent>Prolific Users of 2020</TableComponent>\n    </Row>\n    <Row className='dashboard-row'>\n      <TableComponent>Hottest Repos of 2020</TableComponent>\n    </Row>\n  </Container >\n)\n\nexport default Dashboard\n","import React from \"react\"\nimport Container from 'react-bootstrap/Container'\nimport { ApolloProvider } from 'react-apollo'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloClient } from 'apollo-boost'\nimport { setContext } from 'apollo-link-context'\nimport Dashboard from './pages/dashboard/dashboard.component.jsx'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst httpLink = createHttpLink({\n  uri:'https://api.github.com/graphql'\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = `${process.env.REACT_APP_GH_API_KEY}`\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})\n\nconst cache = new InMemoryCache()\n\nconst client = new ApolloClient({\n  uri: httpLink,\n  link: authLink.concat(httpLink),\n  cache\n})\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <Container className=\"app\">\n      <Dashboard/>\n    </Container>\n  </ApolloProvider>\n)\n\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}